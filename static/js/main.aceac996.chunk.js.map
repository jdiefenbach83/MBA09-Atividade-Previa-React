{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","height","setHeight","weight","setWeight","className","id","name","type","min","step","value","onChange","event","target","htmlFor","disabled","imc","imcToReturn","toFixed","calculateIMC","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2JA2GeA,MAzGf,WAAgB,IAAD,EACeC,mBAAS,GADxB,mBACNC,EADM,KACEC,EADF,OAEeF,mBAAS,GAFxB,mBAENG,EAFM,KAEEC,EAFF,KA+Cb,OACE,qBAAKC,UAAU,MAAf,SACE,uBAAMA,UAAU,SAAhB,UACE,sBAAKA,UAAU,MAAf,UACE,sBAAKA,UAAU,qBAAf,UACE,uBACEC,GAAG,SACHC,KAAK,SACLC,KAAK,SACLH,UAAU,WACVI,IAAI,IACJC,KAAK,MACLC,MAAOV,EACPW,SAxDe,SAACC,GAC1BX,GAAWW,EAAMC,OAAOH,UAyDhB,uBACEI,QAAQ,SACRV,UAAU,SAFZ,4BAKF,sBAAKA,UAAU,qBAAf,UACE,uBACEC,GAAG,SACHC,KAAK,SACLC,KAAK,SACLH,UAAU,WACVI,IAAI,IACJC,KAAK,MACLC,MAAOR,EACPS,SApEe,SAACC,GAC1BT,GAAWS,EAAMC,OAAOH,UAqEhB,uBACEI,QAAQ,SACRV,UAAU,SAFZ,6BAMJ,qBAAKA,UAAU,MAAf,SACE,sBAAKA,UAAU,qBAAf,UACE,uBACEW,UAAQ,EACRT,KAAK,SACLD,GAAG,SACHE,KAAK,OACLH,UAAU,WACVM,MAhFS,WACnB,IAAMM,EAAcd,EAAM,SAAKF,EAAS,IAAQ,GAC1CiB,EAAcD,EAAIE,QAAQ,GAEhC,OAAIF,GAAO,IAAMA,EAAM,GACf,GAAN,OAAUC,EAAV,mCAGED,GAAO,IAAMA,EAAM,KACf,GAAN,OAAUC,EAAV,6BAGED,GAAO,MAAQA,EAAM,GACjB,GAAN,OAAUC,EAAV,0BAGED,GAAO,IAAMA,EAAM,GACf,GAAN,OAAUC,EAAV,4BAGED,GAAO,IAAMA,EAAM,GACf,GAAN,OAAUC,EAAV,+BAGED,GAAO,IAAMA,GAAO,GAChB,GAAN,OAAUC,EAAV,+BAGED,EAAM,GACF,GAAN,OAAUC,EAAV,+BAGK,GAgDUE,KAET,uBACEL,QAAQ,SACRV,UAAU,UAFZ,4BClFGgB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.aceac996.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nfunction App() {\n  const [height, setHeight] = useState(0);\n  const [weight, setWeight] = useState(0);\n\n  const handleHeightChange = (event: { target: { value: string | number; }; }) => {\n    setHeight(+event.target.value);\n  }\n\n  const handleWeightChange = (event: { target: { value: string | number; }; }) => {\n    setWeight(+event.target.value);\n  }\n\n  const calculateIMC = (): string => {    \n    const imc: number = weight / ((height / 100) ** 2);\n    const imcToReturn = imc.toFixed(2);\n    \n    if (imc >= 16 && imc < 17) {\n      return `${imcToReturn} kg/m²: Muito abaixo do peso`;\n    }\n\n    if (imc >= 17 && imc < 18.5) {\n      return `${imcToReturn} kg/m²: Abaixo do peso`;\n    }\n\n    if (imc >= 18.5 && imc < 25) {\n      return `${imcToReturn} kg/m²: Peso normal`;\n    }\n\n    if (imc >= 25 && imc < 30) {\n      return `${imcToReturn} kg/m²: Acima do peso`;\n    }\n\n    if (imc >= 30 && imc < 35) {\n      return `${imcToReturn} kg/m²: Obesidade grau 1`;\n    }\n\n    if (imc >= 35 && imc <= 40) {\n      return `${imcToReturn} kg/m²: Obesidade grau 2`;\n    }\n\n    if (imc > 40) {\n      return `${imcToReturn} kg/m²: Obesidade grau 3`;\n    }\n    \n    return '';\n  }\n\n  return (\n    <div className=\"row\">\n      <form className=\"col s8\">\n        <div className=\"row\">       \n          <div className=\"input-field col s4\">\n            <input \n              id=\"height\" \n              name=\"height\" \n              type=\"number\" \n              className=\"validate\" \n              min=\"0\" \n              step=\"any\"\n              value={height}\n              onChange={handleHeightChange}\n            />\n            <label \n              htmlFor=\"height\"\n              className=\"active\"\n            >Altura (cm)</label>\n          </div>\n          <div className=\"input-field col s4\">\n            <input \n              id=\"weight\" \n              name=\"weight\" \n              type=\"number\" \n              className=\"validate\" \n              min=\"0\" \n              step=\"any\"\n              value={weight}\n              onChange={handleWeightChange}\n            />\n            <label \n              htmlFor=\"weight\"\n              className=\"active\"\n            >Peso (kg)</label>\n          </div>        \n        </div>\n        <div className=\"row\">\n          <div className=\"input-field col s8\">\n            <input \n              disabled \n              name=\"result\" \n              id=\"result\" \n              type=\"text\" \n              className=\"validate\" \n              value={calculateIMC()}\n            />\n            <label \n              htmlFor=\"result\"\n              className=\"active \"\n            >IMC</label>\n          </div>        \n        </div>        \n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}